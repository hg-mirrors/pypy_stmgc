==================================================
Details of the interactions between STM and the GC
==================================================


--------------------------
Introduction (hand-waving)
--------------------------

When we run multiple threads, the common case is to access objects that
have only been seen by the current thread.  Accessing the same object
from multiple threads is possible, and handled correctly (that's the
whole point), but a relatively rare case.

So each object is classified as "public", "protected", or "private".
Objects are created private, and later become protected, and stay so as
long as they are not read by a different thread.  The point is to use
very different mechanisms for public and for non-public objects.  Public
objects are visible by all threads, but read-only in memory; to change
them, a copy must be made, and the changes written to the copy (the
"redolog" approach to STM).  Non-public objects, on the other hand, are
modified in-place, with (if necessary) a copy of them being made only
for the purpose of a possible abort of the transaction (the "undolog"
approach).

This is combined with a generational GC similar to PyPy's --- but here,
each thread gets its own nursery and does its own "minor collections",
independently of the others.

The idea of protected objects is that when another thread tries to
follow a pointer to them, then it is that other thread's job to
carefully "steal" the object and turn it public (possibly making a copy
of it if needed, e.g. if it was still a young object living in the
original nursery).

The same object can exist temporarily in multiple versions: any number
of public copies; at most one active protected copy; and optionally one
private copy per thread (this is the copy as currently seen by the
transaction in progress on that thread).  The GC cleans up the
unnecessary copies.

These ideas are basically variants and extensions of the same basic idea
of keeping multiple copies with revision numbers to track them.
Moreover, "read barriers" and "write barriers" are used by the C program
calling into this library in order to be sure that it is accessing the
right version of the object.  In the current variant we can have very
cheap read barriers, which are definitely a major speed improvement over
the previous variants (and, as far as I know, over most of the other
existing STMs).


----------------------
Details (more precise)
----------------------

In this document we say "high-level object" to mean an object from the
point of the user of the library, as opposed to an "object copy", which
is what occupies the space of one allocated piece of memory.  One
high-level object can exist in several copies simultaneously.  This
concept of "copy" should not be confused with a "revision", which stands
for a globally consistent copy of all objects.  One revision is the
result of one transaction.  A program usually has one revision per
thread in progress, plus any number of older committed revisions.  The
committed revisions are globally ordered.  This is the order that the
multithreaded program appears to have followed serially.

The object copies exist in one of three main states: they can be
"public", "protected" or "private".  A private copy is a copy that was
created or modified by the transaction in progress; this copy is always
invisible to other threads.  When that transaction commits, all private
copies become protected.  They remain protected as long as they are only
accessed by the same thread.  A copy becomes public only when another
thread requests access to it (or, more precisely, "steals" access to
it).  Once public, a copy is immutable in memory.

From the point of view of the generational GC, each copy is either young
or old.  All new copies are allocated young.  They become old at the
next minor collection.  In the common case, copies are allocated in the
nursery, and during the next minor collection, if they survive, they are
moved outside.  The nursery contains only young copies, but a few copies
outside might be young too (e.g. object copies too large for the
nursery).  (In fact we found out in PyPy that it's a good idea to create
objects young even if they are outside the nursery; otherwise, a program
that creates a lot of medium-sized objects will quickly exhaust the
memory and trigger a lot of major collections.)  For the rest of this
document we'll ignore young copies outside the nursery.

An object that was never seen by a different thread has got at most one
private copy (if it was created or modified by the current transaction)
and one protected copy (if it is older than the current transaction).
If it has two copies, then the private one is the regular copy, and the
other copy works as a backup copy that remembers the state that the
object had at the start of the current transaction.

If an object has got a backup copy but isn't modified any more, the next
(minor or major) GC collection will free the backup copy.

The way to share data between threads goes via prebuilt objects, which
are always public: it is their existence that gives the starting point
for threads to see each other's objects.  This involves three different
steps.

1. A thread tries to write to a public object.  This is done by
allocating a fresh private copy of the public object.  Then writes go to
the private copy.  If the transaction commits, the private copy becomes
protected, and the public object is made to point to it (with
multithread care).  From now on, any access to the public object from
the same thread will work on the protected copy.  Any access from a
different thread will trigger "stealing", as explained next.

2. When we are running a thread, it may try to access a public object
but find that another thread (the "foreign thread") has committed
changes to it; i.e. the object has a protected copy, but belonging to a
foreign thread.  Then we "steal" the object.  It is a read-only
operation performed by peeking on the foreign thread's data.  The
operation involves making a duplicate of the original copy, if it was in
the foreign thread's nursery (so that no thread ever reads another
thread's nursery, outside of "stealing").  The stolen copy, or the
original protected copy if it was not in the nursery, is then marked as
public.  From now on nobody is allowed to change (or free) the content
of this copy, and it becomes the current public copy.  These public
copies accumulate in case the same object is successively stolen by
different threads.  A new public copy is made every time, so that
unrelated threads don't have to worry about existing public copies being
updated.  (This chain of objects is freed at the next major GC, which is
a stop-the-world operation.)

3. A subtle but important point about making a public copy is about all
the references stored in the object: if they point to other protected
objects, then we cannot simply keep them as they are in the public copy.
In that case, we have to replace these references with pointers to
public "stubs".  A stub consists of only the header of the object.  It
is set up in the same way as in point 1 above: it plays the role of an
"older" public copy of a protected object (although it is not actually
older of course).  If "we", the thread that just stole the object, then
try to follow one of the references, we will access one of these stubs,
and go back to point 2: stealing the target object's protected copy.


Read/Write Barriers
-------------------

This design is made to optimize the hopefully common case: objects we
handle are mostly protected, or if they are public, they are mostly
read-only.  We can design in consequence the following three points:

1. the extra data stored in the objects (GC flags, and one extra word
called `h_revision`).

2. the other "off-line" data stored in thread-local data.

3. the read/write barriers.

Point 3 is essential for performance: we want most importantly a read
barrier that doesn't trigger for the cases described above.  The read
barrier has two purposes: it needs to check that a given pointer P
references an object that is not outdated already; and it needs to
record the pointer in the "read set" of the current transaction.

The first check is easy, and could be implemented by checking a flag in
the header of the copy.  But the recording in the read set is a bit more
annoying.  We need to maintain a thread-local *set* of all accessed
objects, but we don't care about the order or recording the occasional
duplicate.  Moreover we don't need to record the private copies of
objects; but we do need all the protected and public objects.  The best
approach is probably to have a quick check "is it definitely recorded
already?" inline, and do the call if the check fails.  It needs careful
design to be done in only a few CPU instructions, but it should be
possible.

(Code like this compiles to 4 instructions in the fast path:

  __thread char *read_barrier_cache;  /* thread-local cache of 64KB */

  if (__builtin_expect(*(gcptr *)(read_barrier_cache + (((long)x) & 65535))
                       != x, 0))
      x = call_read_barrier(x);
)

The case of the write barrier is similar to the first half of the read
barrier.  We need to do a call to the slow path if the object is not
already private.  For performance reasons, "being private" is not
directly a flag in the object, because when a transaction commits, we
don't want to have to walk all private copies to change this flag.
Instead, private copies have a precise negative odd number in their
`h_revision` field, called the "private revision identifier".  When a
transaction commits, we change the value of the private revision
identifier, and all previously-private objects become automatically
protected.  So the write barrier fast-path checks if the `h_revision` is
equal to the private revision identifier.


The extendable timestamp model
------------------------------

A public object copy is either up-to-date (no more recent committed
copy) or outdated.  The public copies need to have globally consistent
revision numbers (produced at commit time).  If there are several public
copies of the same object, we only need to store the revision number of
the most recent one.  The previous copies are simply outdated and need
instead to store a pointer to a more recent copy.  We use the same field
`h_revision` to store either the revision number or the pointer to the
more recent copy.

The important property is that committed transactions must be
"linearized": when we look at them a posteriori, it must be as if they
ran serially in some order.  This includes the reads done during the
transaction: they must return data from the most recently committed copy
of the objects (in the same order).  This is done with a shared global
variable, the "global time", that gives the most recently committed
revision number.  Each transaction in progress stores a temporary
"starting time".  It is initially set to the current global time.  If,
at the end of the transaction, all objects read during the transaction
have a revision not greater than this starting time, then we have no
"read-write" conflict (i.e. reads of an object that another thread has
modified; there are also in theory "write-write" conflicts, but this
case can be reduced to read-write conflicts if we consider that all
writes are also reads).

An improvement over this basic model is that if, during the transaction,
we are about to read a new object and detect a read-write conflict, we
can try to "extend" the starting time to the value that is now stored in
the global time variable.  We need to check that none of the objects
that we have read previously have been modified in the interval.  If
that is the case, then the transaction would have given the same results
if it had started at the new time.

The model described above is known in the literature as the "extendable
timestamp" model.  We apply it for public object.


Commits on protected objects
----------------------------

In traditional transactional systems, we have a special case to speed up
transactions that don't do any write; but that seems too restricted to
be useful in PyPy.  Instead, we can have a special case for transactions
that didn't try to write to any *public* object.  Our assumption is that
transactions can be anywhere from very small to very large; the small
ones are unlikely to change any object that has been seen by another
thread.  Moreover the previous transaction in the same thread is
unlikely to have got one of its objects stolen.

To cover this case more efficiently, we assign in theory to each
committed transaction a pair of numbers.  The first one is the regular
global time at which the transaction was committed.  The second one is a
thread-local number (never actually made explicit in the code).  The
global order of the committed transactions is given by the ordering of
these 2-tuples.

A commit which writes to public objects works as described above; it
gives the transaction the number `(global_time, 0)`, and atomically
increments `global_time`.

A commit with no write to any public object produces the number
`(start_time, N+1)`, provided that we didn't have any of our objects
stolen since `start_time`.  This condition is enough to guarantee that
it is ok to linearize the transaction at `(start_time, N+1)` even though
other threads might already have produced transactions linearized at
some later time.  Indeed, the fact that no object of ours was stolen
means that no other thread's transaction depends on any object we're
about to commit.  In other words, the absence of both public writes and
stealing is a cheap way to determine that this transaction "commutes"
with other transactions already committed.  (My current guess is that we
can in this way reduce the pressure over the word of memory that
contains the shared "global time" variable, and make many very short
transactions efficient.)


Object copies in detail
-----------------------

See doc-objects.txt.


Minor and major collections
---------------------------

The GC needs to interact with objects being copied outside the nursery:
we need to detect if, later, they are modified to contain a pointer to a
nursery object.  This is the classical purpose of a write barrier in GC
terms.  In our case, we need the write barrier's call to occur even on a
private object freshly copied out of the nursery, the first time it is
written to.  This is easily combined with the write barrier described
above: when a minor collection copies objects out of the nursery,
private objects' `h_revision` field is temporarily replaced with a
different value.

Major (global) collections are stop-the-world: when they need to occur,
the threads are all stopped at the next safe point.  Then the problem
is simplified to a regular complete garbage collection.  Additionally,
as hinted above, we can compact chains of public object copies.

Note that our design relies on the following property: in a given copy
of an object which was committed at revision N, all pointers points to
copies of objects which were committed at or before revision N.  This
property is true by construction, but we must be careful not to break it
by "optimizing" the content of a copy.  In particular, major collections
have to preserve this property.  It means that the best (but still safe)
thing to do during major collection is to compress chains of public
objects down to one copy (the most recent one) and one stub.  We fix the
references in existing objects to point to either the real copy or the
stub.  This is probably a bit involved: we might have to get the current
revision numbers of all threads, and theoretically compact each interval
of numbers down to only one number, but still keep one active revision
number per thread.
