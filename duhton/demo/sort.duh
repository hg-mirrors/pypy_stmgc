



(setq c (container (list 1 2 3 4)))


(setq _rand (container (list 133542157 362436069 521288629 88675123)))
(defun xor128 ()
  (setq lst (get _rand))
  (setq x (get lst 0))
  (setq y (get lst 1))
  (setq z (get lst 2))
  (setq w (get lst 3))
  
  (setq t (^ x (<< x 11)))
  (setq x y)
  (setq y z)
  (setq z w)

  (setq w (^ w (^ (>> w 19) (^ t (>> t 8)))))
  (set lst 0 x)
  (set lst 1 y)
  (set lst 2 z)
  (set lst 3 w)
  w
  )


(defun random_list (n)
  (setq i n)
  (setq res (list))
  (while (> i 0)
    (append res (% (xor128) 10))
    (setq i (- i 1))
    )
  res
  )



(defun merge_lists (as bs res)
  ;; empties the two lists and merges the result to res
  (setq len_as (len as))
  (setq len_bs (len bs))
  (if (< 0 len_as)
      (if (< 0 len_bs)
          (if (> (get as 0) (get bs 0))
              (append res (pop bs 0))
            (append res (pop as 0))
            )
        (append res (pop as 0))
        )
    (if (< 0 len_bs)
        (append res (pop bs 0))
      )
    )
  (if (|| (< 0 len_as) (< 0 len_bs))
      (merge_lists as bs res)
    )
  )



(defun split_list (xs)
  ;; empties xs and fills 2 new lists to be returned
  (setq half_len (/ (len xs) 2))
  (setq first (list))
  (setq second (list))

  (while (< 0 (len xs))
    (if (< 0 half_len)
        (append first (pop xs 0))
      (append second (pop xs 0))
      )
    (setq half_len (- half_len 1))
    )

  (list first second)
  )


(defun merge_sort (xs)
  (if (<= (len xs) 1)                   ; 1 elem
      xs
    (progn                              ; many elems
      (setq lists (split_list xs))
      (setq left (merge_sort (get lists 0)))
      (setq right (merge_sort (get lists 1)))
      ;; (print left right)
      (setq merged (list))
      (merge_lists left right merged)
      ;; (print (quote >) merged)
      merged
      )
    )
  )


(defun copy_list (xs)
  (setq res (list))
  (setq idx 0)
  (while (< idx (len xs))
    (append res (get xs idx))
    (setq idx (+ idx 1))
    )
  res
  )

(defun print_list (xs)
  (print (quote len:) (len xs) (quote ->) xs)
  )




;; (setq as (random_list 20))
;; (setq bs (random_list 20))
;; (print as)
;; (print bs)
;; (print (split_list as))

(setq cs (random_list 10000))
(print_list cs)
(print_list (merge_sort (copy_list cs)))




